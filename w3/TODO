**SETUP**

- Clone this repo to your machine: https://github.com/FullstackAcademy/study-saturdays
- `cd` into the `w3` folder, then `npm install`
- `git checkout w3-cycle-1` (`git branch -a` to see all branches)
- `createdb study-saturdays`
- Create a `seed.js` file in your `w3` folder and add the following code to the seed file:

```js
const db = require('./db/db');
const Student = require('./db/models/students');
const Test = require('./db/models/tests');
const faker = require('faker');

db.sync({ force: true })
  .then(() => {
    return Promise.all([
      Student.create({
        firstName: 'Jordan',
        lastName: 'Walke',
        email: 'jw@react.com'
      }),
      Student.create({
        firstName: 'Dan',
        lastName: 'Abramov',
        email: 'da@react.com'
      }),
      Student.create({
        firstName: 'James',
        lastName: 'Dean',
        email: 'jd@eastofeden.com'
      }),
      Student.create({
        firstName: 'John',
        lastName: 'Wayne',
        email: 'jw@truegrit.com'
      }),
      Student.create({
        firstName: 'Cary',
        lastName: 'Grant',
        email: 'cg@ithappened1nite.com'
      })
    ]);
  })
  .then(() => {
    return Promise.all([
      Test.create({
        subject: 'Computer Science',
        grade: 45,
        studentId: 1
      }),
      Test.create({
        subject: 'Art History',
        grade: 67,
        studentId: 2
      }),
      Test.create({
        subject: 'Business',
        grade: 29,
        studentId: 3
      }),
      Test.create({
        subject: 'History',
        grade: 88,
        studentId: 4
      }),
      Test.create({
        subject: 'English',
        grade: 90,
        studentId: 5
      }),
      Test.create({
        subject: 'Art',
        grade: 60,
        studentId: 1
      }),
      Test.create({
        subject: 'Social Sciences',
        grade: 70,
        studentId: 2
      }),
      Test.create({
        subject: 'Math',
        grade: 88,
        studentId: 2
      }),
      Test.create({
        subject: 'Birds',
        grade: 50,
        studentId: 3
      }),
      Test.create({
        subject: 'Art',
        grade: 66,
        studentId: 4
      }),
      Test.create({
        subject: 'Anything',
        grade: 20,
        studentId: 5
      }),
      Test.create({
        subject: faker.lorem.word(),
        grade: 45,
        studentId: 1
      }),
      Test.create({
        subject: faker.lorem.word(),
        grade: 67,
        studentId: 2
      }),
      Test.create({
        subject: faker.lorem.word(),
        grade: 29,
        studentId: 3
      }),
      Test.create({
        subject: faker.lorem.word(),
        grade: 88,
        studentId: 4
      }),
      Test.create({
        subject: faker.lorem.word(),
        grade: 90,
        studentId: 5
      })
    ]);
  })
  .then(() => {
    console.log('yay we did it!');
    db.close();
  })
  .catch(err => {
    console.log('an error ack');
    console.log(err.stack);
    db.close();
  });
```

- Edit your `package.json` “scripts” property to look like this:
  ````"scripts": {
    "start": "webpack -w & nodemon app.js", <--- edited
    "build": "webpack",
    "build-watch": "webpack -w",
    "seed": "node db/seed.js" <------------------ added
  },```
  ````
- Use `npm run seed` to seed the database
- Verify all is working by running `npm start`and visiting http://localhost:3000/

**Cycle 1**

- In browser/index.js, import `React` and `ReactDOM` and use the latter to render a simple HTML tag that prints “Hello React!” to the screen

**Cycle 2**

- Create a `components` folder in the `browser` folder.
- In that new `components` folder, create a `<Main>` component that fetches a list of all students from the server.
- Using this list of students, render a table with one column. Each row in the first column should display each student’s full name.

**Cycle 3**

- Add a second column to the table.
- In the second column, add a link, that when clicked, renders all of that student’s test scores below the table.
  - Hint: This will require a click handler that updates the component's state

**BONUS**

- In the area below the table with the selected student’s test scores, compute and display the average test score.

**ENDPOINT**

- Unless you switched branches, you should still be on branch `w3-cycle-1`
- Once you're done with the workshop, run `git checkout w3-cycle-4` to compare your solution to the official solution (`git checkout w3-cycle-1` will take you back to your own code)
